// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: io_grpc_s.proto

package io

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BcRequest struct {
	Nsp                  string   `protobuf:"bytes,1,opt,name=nsp,proto3" json:"nsp,omitempty"`
	Room                 string   `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BcRequest) Reset()         { *m = BcRequest{} }
func (m *BcRequest) String() string { return proto.CompactTextString(m) }
func (*BcRequest) ProtoMessage()    {}
func (*BcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cc0fcf1d5ef64d, []int{0}
}
func (m *BcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcRequest.Merge(m, src)
}
func (m *BcRequest) XXX_Size() int {
	return m.Size()
}
func (m *BcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BcRequest proto.InternalMessageInfo

func (m *BcRequest) GetNsp() string {
	if m != nil {
		return m.Nsp
	}
	return ""
}

func (m *BcRequest) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

func (m *BcRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type BcReply struct {
	Suc                  bool     `protobuf:"varint,1,opt,name=suc,proto3" json:"suc,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BcReply) Reset()         { *m = BcReply{} }
func (m *BcReply) String() string { return proto.CompactTextString(m) }
func (*BcReply) ProtoMessage()    {}
func (*BcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cc0fcf1d5ef64d, []int{1}
}
func (m *BcReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcReply.Merge(m, src)
}
func (m *BcReply) XXX_Size() int {
	return m.Size()
}
func (m *BcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BcReply.DiscardUnknown(m)
}

var xxx_messageInfo_BcReply proto.InternalMessageInfo

func (m *BcReply) GetSuc() bool {
	if m != nil {
		return m.Suc
	}
	return false
}

func (m *BcReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SayRequest struct {
	Nsp                  string   `protobuf:"bytes,1,opt,name=nsp,proto3" json:"nsp,omitempty"`
	FromUser             string   `protobuf:"bytes,2,opt,name=fromUser,proto3" json:"fromUser,omitempty"`
	ToUser               string   `protobuf:"bytes,3,opt,name=toUser,proto3" json:"toUser,omitempty"`
	Msg                  string   `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayRequest) Reset()         { *m = SayRequest{} }
func (m *SayRequest) String() string { return proto.CompactTextString(m) }
func (*SayRequest) ProtoMessage()    {}
func (*SayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cc0fcf1d5ef64d, []int{2}
}
func (m *SayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRequest.Merge(m, src)
}
func (m *SayRequest) XXX_Size() int {
	return m.Size()
}
func (m *SayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SayRequest proto.InternalMessageInfo

func (m *SayRequest) GetNsp() string {
	if m != nil {
		return m.Nsp
	}
	return ""
}

func (m *SayRequest) GetFromUser() string {
	if m != nil {
		return m.FromUser
	}
	return ""
}

func (m *SayRequest) GetToUser() string {
	if m != nil {
		return m.ToUser
	}
	return ""
}

func (m *SayRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SayReply struct {
	Suc                  bool     `protobuf:"varint,1,opt,name=suc,proto3" json:"suc,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayReply) Reset()         { *m = SayReply{} }
func (m *SayReply) String() string { return proto.CompactTextString(m) }
func (*SayReply) ProtoMessage()    {}
func (*SayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cc0fcf1d5ef64d, []int{3}
}
func (m *SayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReply.Merge(m, src)
}
func (m *SayReply) XXX_Size() int {
	return m.Size()
}
func (m *SayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReply.DiscardUnknown(m)
}

var xxx_messageInfo_SayReply proto.InternalMessageInfo

func (m *SayReply) GetSuc() bool {
	if m != nil {
		return m.Suc
	}
	return false
}

func (m *SayReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*BcRequest)(nil), "io.BcRequest")
	proto.RegisterType((*BcReply)(nil), "io.BcReply")
	proto.RegisterType((*SayRequest)(nil), "io.SayRequest")
	proto.RegisterType((*SayReply)(nil), "io.SayReply")
}

func init() { proto.RegisterFile("io_grpc_s.proto", fileDescriptor_d1cc0fcf1d5ef64d) }

var fileDescriptor_d1cc0fcf1d5ef64d = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x8f, 0x4f,
	0x2f, 0x2a, 0x48, 0x8e, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0xcc, 0x57,
	0x72, 0xe6, 0xe2, 0x74, 0x4a, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62,
	0xce, 0x2b, 0x2e, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x84, 0xb8, 0x58,
	0x8a, 0xf2, 0xf3, 0x73, 0x25, 0x98, 0xc0, 0x42, 0x60, 0x36, 0x48, 0x55, 0x6e, 0x71, 0xba, 0x04,
	0x33, 0x44, 0x55, 0x6e, 0x71, 0xba, 0x92, 0x2e, 0x17, 0x3b, 0xc8, 0x90, 0x82, 0x9c, 0x4a, 0x90,
	0x64, 0x71, 0x69, 0x32, 0xd8, 0x08, 0x8e, 0x20, 0x10, 0x13, 0x24, 0x92, 0x5a, 0x54, 0x04, 0x35,
	0x01, 0xc4, 0x54, 0x4a, 0xe1, 0xe2, 0x0a, 0x4e, 0xac, 0xc4, 0x6d, 0xa9, 0x14, 0x17, 0x47, 0x5a,
	0x51, 0x7e, 0x6e, 0x68, 0x71, 0x2a, 0x4c, 0x1b, 0x9c, 0x2f, 0x24, 0xc6, 0xc5, 0x56, 0x92, 0x0f,
	0x96, 0x81, 0xd8, 0x0f, 0xe5, 0xc1, 0x1c, 0xc5, 0x82, 0x70, 0x94, 0x1e, 0x17, 0x07, 0xd8, 0x16,
	0x22, 0x5d, 0x65, 0x14, 0xc6, 0xc5, 0x94, 0x99, 0x2f, 0xa4, 0xc9, 0xc5, 0xe9, 0x54, 0x94, 0x9f,
	0x98, 0xe2, 0x9c, 0x58, 0x5c, 0x22, 0xc4, 0xab, 0x97, 0x99, 0xaf, 0x07, 0x0f, 0x1e, 0x29, 0x6e,
	0x18, 0xb7, 0x20, 0xa7, 0x52, 0x89, 0x41, 0x48, 0x95, 0x8b, 0x39, 0x38, 0xb1, 0x52, 0x88, 0x0f,
	0x24, 0x8a, 0xf0, 0x8f, 0x14, 0x0f, 0x9c, 0x0f, 0x56, 0xe6, 0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x0e,
	0x7e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x48, 0xf3, 0xfb, 0x91, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IoClient is the client API for Io service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IoClient interface {
	BroadCast(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (*BcReply, error)
	Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
}

type ioClient struct {
	cc *grpc.ClientConn
}

func NewIoClient(cc *grpc.ClientConn) IoClient {
	return &ioClient{cc}
}

func (c *ioClient) BroadCast(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (*BcReply, error) {
	out := new(BcReply)
	err := c.cc.Invoke(ctx, "/io.io/BroadCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := c.cc.Invoke(ctx, "/io.io/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IoServer is the server API for Io service.
type IoServer interface {
	BroadCast(context.Context, *BcRequest) (*BcReply, error)
	Say(context.Context, *SayRequest) (*SayReply, error)
}

// UnimplementedIoServer can be embedded to have forward compatible implementations.
type UnimplementedIoServer struct {
}

func (*UnimplementedIoServer) BroadCast(ctx context.Context, req *BcRequest) (*BcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCast not implemented")
}
func (*UnimplementedIoServer) Say(ctx context.Context, req *SayRequest) (*SayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterIoServer(s *grpc.Server, srv IoServer) {
	s.RegisterService(&_Io_serviceDesc, srv)
}

func _Io_BroadCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoServer).BroadCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.io/BroadCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoServer).BroadCast(ctx, req.(*BcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Io_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.io/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoServer).Say(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Io_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.io",
	HandlerType: (*IoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCast",
			Handler:    _Io_BroadCast_Handler,
		},
		{
			MethodName: "Say",
			Handler:    _Io_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io_grpc_s.proto",
}

func (m *BcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Room) > 0 {
		i -= len(m.Room)
		copy(dAtA[i:], m.Room)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Room)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nsp) > 0 {
		i -= len(m.Nsp)
		copy(dAtA[i:], m.Nsp)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Nsp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BcReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Suc {
		i--
		if m.Suc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToUser) > 0 {
		i -= len(m.ToUser)
		copy(dAtA[i:], m.ToUser)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.ToUser)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromUser) > 0 {
		i -= len(m.FromUser)
		copy(dAtA[i:], m.FromUser)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.FromUser)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nsp) > 0 {
		i -= len(m.Nsp)
		copy(dAtA[i:], m.Nsp)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Nsp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintIoGrpcS(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Suc {
		i--
		if m.Suc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIoGrpcS(dAtA []byte, offset int, v uint64) int {
	offset -= sovIoGrpcS(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nsp)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	l = len(m.Room)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BcReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suc {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nsp)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	l = len(m.FromUser)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	l = len(m.ToUser)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suc {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovIoGrpcS(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIoGrpcS(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIoGrpcS(x uint64) (n int) {
	return sovIoGrpcS(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoGrpcS
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nsp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoGrpcS(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoGrpcS
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suc = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoGrpcS(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoGrpcS
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nsp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoGrpcS(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoGrpcS
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suc = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoGrpcS(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIoGrpcS
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIoGrpcS(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIoGrpcS
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoGrpcS
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIoGrpcS
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIoGrpcS
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIoGrpcS
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIoGrpcS        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIoGrpcS          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIoGrpcS = fmt.Errorf("proto: unexpected end of group")
)
